// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: accounts.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (owner, bank_name, account_number, account_holder_name) VALUES ($1, $2, $3, $4) RETURNING id, owner, account_number, bank_name, account_holder_name, created_at
`

type CreateAccountParams struct {
	Owner             string `json:"owner"`
	BankName          string `json:"bank_name"`
	AccountNumber     string `json:"account_number"`
	AccountHolderName string `json:"account_holder_name"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Owner,
		arg.BankName,
		arg.AccountNumber,
		arg.AccountHolderName,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AccountNumber,
		&i.BankName,
		&i.AccountHolderName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, account_number, bank_name, account_holder_name, created_at FROM accounts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AccountNumber,
		&i.BankName,
		&i.AccountHolderName,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one

SELECT id, owner, account_number, bank_name, account_holder_name, created_at FROM accounts WHERE owner = $1 ORDER BY id LIMIT $2 OFFSET $3
`

type GetAccountForUpdateParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

// SELECT * FROM accounts WHERE id = $1 LIMIT 1 FOR NO KEY UPDATE;
func (q *Queries) GetAccountForUpdate(ctx context.Context, arg GetAccountForUpdateParams) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountForUpdate, arg.Owner, arg.Limit, arg.Offset)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AccountNumber,
		&i.BankName,
		&i.AccountHolderName,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts SET bank_name = $2, account_number = $3, account_holder_name = $4 WHERE id = $1 RETURNING id, owner, account_number, bank_name, account_holder_name, created_at
`

type UpdateAccountParams struct {
	ID                int64  `json:"id"`
	BankName          string `json:"bank_name"`
	AccountNumber     string `json:"account_number"`
	AccountHolderName string `json:"account_holder_name"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.ID,
		arg.BankName,
		arg.AccountNumber,
		arg.AccountHolderName,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AccountNumber,
		&i.BankName,
		&i.AccountHolderName,
		&i.CreatedAt,
	)
	return i, err
}
