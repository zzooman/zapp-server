// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comments.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (post_id, commentor, content) VALUES ($1, $2, $3) RETURNING id, post_id, commentor, content, created_at
`

type CreateCommentParams struct {
	PostID    int64  `json:"post_id"`
	Commentor string `json:"commentor"`
	Content   string `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.PostID, arg.Commentor, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Commentor,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, post_id, commentor, content, created_at FROM comments WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRow(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Commentor,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getComments = `-- name: GetComments :many
SELECT id, post_id, commentor, content, created_at FROM comments ORDER BY id LIMIT $1 OFFSET $2
`

type GetCommentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetComments(ctx context.Context, arg GetCommentsParams) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getComments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Commentor,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :exec
UPDATE comments SET post_id = $2, commentor = $3, content = $4 WHERE id = $1
`

type UpdateCommentParams struct {
	ID        int64  `json:"id"`
	PostID    int64  `json:"post_id"`
	Commentor string `json:"commentor"`
	Content   string `json:"content"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) error {
	_, err := q.db.Exec(ctx, updateComment,
		arg.ID,
		arg.PostID,
		arg.Commentor,
		arg.Content,
	)
	return err
}
