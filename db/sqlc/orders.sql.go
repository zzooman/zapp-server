// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (product_id, buyer, quantity, price_at_order, status) VALUES ($1, $2, $3, $4, $5) RETURNING id, product_id, buyer, quantity, price_at_order, status, created_at
`

type CreateOrderParams struct {
	ProductID    int64       `json:"product_id"`
	Buyer        string      `json:"buyer"`
	Quantity     int64       `json:"quantity"`
	PriceAtOrder int64       `json:"price_at_order"`
	Status       pgtype.Text `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ProductID,
		arg.Buyer,
		arg.Quantity,
		arg.PriceAtOrder,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Buyer,
		&i.Quantity,
		&i.PriceAtOrder,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, product_id, buyer, quantity, price_at_order, status, created_at FROM orders WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Buyer,
		&i.Quantity,
		&i.PriceAtOrder,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT id, product_id, buyer, quantity, price_at_order, status, created_at FROM orders ORDER BY id LIMIT $1 OFFSET $2
`

type GetOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetOrders(ctx context.Context, arg GetOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Buyer,
			&i.Quantity,
			&i.PriceAtOrder,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders SET product_id = $2, buyer = $3, quantity = $4, price_at_order = $5, status = $6 WHERE id = $1
`

type UpdateOrderParams struct {
	ID           int64       `json:"id"`
	ProductID    int64       `json:"product_id"`
	Buyer        string      `json:"buyer"`
	Quantity     int64       `json:"quantity"`
	PriceAtOrder int64       `json:"price_at_order"`
	Status       pgtype.Text `json:"status"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder,
		arg.ID,
		arg.ProductID,
		arg.Buyer,
		arg.Quantity,
		arg.PriceAtOrder,
		arg.Status,
	)
	return err
}
