// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (seller, name, description, price, stock, images) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, seller, name, description, price, stock, images
`

type CreateProductParams struct {
	Seller      string      `json:"seller"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Price       int64       `json:"price"`
	Stock       int64       `json:"stock"`
	Images      []string    `json:"images"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Seller,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.Images,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Seller,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.Images,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, seller, name, description, price, stock, images FROM products WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Seller,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.Images,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, seller, name, description, price, stock, images FROM products ORDER BY id LIMIT $1 OFFSET $2
`

type GetProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Seller,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.Images,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products SET seller = $2, name = $3, description = $4, price = $5, stock = $6, images = $7 WHERE id = $1
`

type UpdateProductParams struct {
	ID          int64       `json:"id"`
	Seller      string      `json:"seller"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Price       int64       `json:"price"`
	Stock       int64       `json:"stock"`
	Images      []string    `json:"images"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.ID,
		arg.Seller,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.Images,
	)
	return err
}
