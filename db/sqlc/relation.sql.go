// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: relation.sql

package db

import (
	"context"
)

const createLikeWithPost = `-- name: CreateLikeWithPost :one
INSERT INTO like_with_post (user_id, post_id) VALUES ($1, $2) RETURNING user_id, post_id
`

type CreateLikeWithPostParams struct {
	UserID int64 `json:"user_id"`
	PostID int64 `json:"post_id"`
}

func (q *Queries) CreateLikeWithPost(ctx context.Context, arg CreateLikeWithPostParams) (LikeWithPost, error) {
	row := q.db.QueryRow(ctx, createLikeWithPost, arg.UserID, arg.PostID)
	var i LikeWithPost
	err := row.Scan(&i.UserID, &i.PostID)
	return i, err
}

const createWishWithProduct = `-- name: CreateWishWithProduct :one
INSERT INTO wish_with_product (user_id, product_id) VALUES ($1, $2) RETURNING user_id, product_id
`

type CreateWishWithProductParams struct {
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) CreateWishWithProduct(ctx context.Context, arg CreateWishWithProductParams) (WishWithProduct, error) {
	row := q.db.QueryRow(ctx, createWishWithProduct, arg.UserID, arg.ProductID)
	var i WishWithProduct
	err := row.Scan(&i.UserID, &i.ProductID)
	return i, err
}

const deleteLikeWithPost = `-- name: DeleteLikeWithPost :exec
DELETE FROM like_with_post WHERE user_id = $1 AND post_id = $2
`

type DeleteLikeWithPostParams struct {
	UserID int64 `json:"user_id"`
	PostID int64 `json:"post_id"`
}

func (q *Queries) DeleteLikeWithPost(ctx context.Context, arg DeleteLikeWithPostParams) error {
	_, err := q.db.Exec(ctx, deleteLikeWithPost, arg.UserID, arg.PostID)
	return err
}

const deleteWishWithProduct = `-- name: DeleteWishWithProduct :exec
DELETE FROM wish_with_product WHERE user_id = $1 AND product_id = $2
`

type DeleteWishWithProductParams struct {
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) DeleteWishWithProduct(ctx context.Context, arg DeleteWishWithProductParams) error {
	_, err := q.db.Exec(ctx, deleteWishWithProduct, arg.UserID, arg.ProductID)
	return err
}

const getLikeWithPost = `-- name: GetLikeWithPost :one
SELECT user_id, post_id FROM like_with_post WHERE user_id = $1 AND post_id = $2 LIMIT 1
`

type GetLikeWithPostParams struct {
	UserID int64 `json:"user_id"`
	PostID int64 `json:"post_id"`
}

func (q *Queries) GetLikeWithPost(ctx context.Context, arg GetLikeWithPostParams) (LikeWithPost, error) {
	row := q.db.QueryRow(ctx, getLikeWithPost, arg.UserID, arg.PostID)
	var i LikeWithPost
	err := row.Scan(&i.UserID, &i.PostID)
	return i, err
}

const getWishWithProduct = `-- name: GetWishWithProduct :one
SELECT user_id, product_id FROM wish_with_product WHERE user_id = $1 AND product_id = $2 LIMIT 1
`

type GetWishWithProductParams struct {
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) GetWishWithProduct(ctx context.Context, arg GetWishWithProductParams) (WishWithProduct, error) {
	row := q.db.QueryRow(ctx, getWishWithProduct, arg.UserID, arg.ProductID)
	var i WishWithProduct
	err := row.Scan(&i.UserID, &i.ProductID)
	return i, err
}
