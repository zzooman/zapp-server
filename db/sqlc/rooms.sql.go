// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rooms.sql

package db

import (
	"context"
)

const checkRoom = `-- name: CheckRoom :one
SELECT id, user_a, user_b, type, created_at FROM Rooms WHERE (user_a = $1 AND user_b = $2) OR (user_a = $2 AND user_b = $1) LIMIT 1
`

type CheckRoomParams struct {
	UserA string `json:"user_a"`
	UserB string `json:"user_b"`
}

func (q *Queries) CheckRoom(ctx context.Context, arg CheckRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, checkRoom, arg.UserA, arg.UserB)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.UserA,
		&i.UserB,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO Rooms (user_a, user_b) VALUES ($1, $2) RETURNING id, user_a, user_b, type, created_at
`

type CreateRoomParams struct {
	UserA string `json:"user_a"`
	UserB string `json:"user_b"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, arg.UserA, arg.UserB)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.UserA,
		&i.UserB,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :one
DELETE FROM Rooms WHERE id = $1 RETURNING id, user_a, user_b, type, created_at
`

func (q *Queries) DeleteRoom(ctx context.Context, id int64) (Room, error) {
	row := q.db.QueryRow(ctx, deleteRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.UserA,
		&i.UserB,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getRoom = `-- name: GetRoom :one
SELECT id, user_a, user_b, type, created_at FROM Rooms WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, id int64) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.UserA,
		&i.UserB,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getRoomsByUser = `-- name: GetRoomsByUser :many
SELECT id, user_a, user_b, type, created_at FROM Rooms WHERE user_a = $1 OR user_b = $1 ORDER BY id
`

func (q *Queries) GetRoomsByUser(ctx context.Context, userA string) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRoomsByUser, userA)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.UserA,
			&i.UserB,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
