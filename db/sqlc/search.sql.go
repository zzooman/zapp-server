// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: search.sql

package db

import (
	"context"
)

const getSearchCount = `-- name: GetSearchCount :one
SELECT id, search_text, count, created_at FROM search_count WHERE search_text = $1 LIMIT 1
`

func (q *Queries) GetSearchCount(ctx context.Context, searchText string) (SearchCount, error) {
	row := q.db.QueryRow(ctx, getSearchCount, searchText)
	var i SearchCount
	err := row.Scan(
		&i.ID,
		&i.SearchText,
		&i.Count,
		&i.CreatedAt,
	)
	return i, err
}

const upsertSearchCount = `-- name: UpsertSearchCount :one
INSERT INTO search_count (search_text, count) 
VALUES ($1, 1) 
ON CONFLICT (search_text) 
DO UPDATE SET count = search_count.count + 1 
RETURNING id, search_text, count, created_at
`

func (q *Queries) UpsertSearchCount(ctx context.Context, searchText string) (SearchCount, error) {
	row := q.db.QueryRow(ctx, upsertSearchCount, searchText)
	var i SearchCount
	err := row.Scan(
		&i.ID,
		&i.SearchText,
		&i.Count,
		&i.CreatedAt,
	)
	return i, err
}
