// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password, email, phone) VALUES ($1, $2, $3, $4) RETURNING username, password, email, phone, password_changed_at, profile, created_at
`

type CreateUserParams struct {
	Username string      `json:"username"`
	Password string      `json:"password"`
	Email    string      `json:"email"`
	Phone    pgtype.Text `json:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.PasswordChangedAt,
		&i.Profile,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, password, email, phone, password_changed_at, profile, created_at FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.PasswordChangedAt,
		&i.Profile,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET password = $2, phone = $3, email = $4, profile = $5 WHERE username = $1 RETURNING username, password, email, phone, password_changed_at, profile, created_at
`

type UpdateUserParams struct {
	Username string      `json:"username"`
	Password string      `json:"password"`
	Phone    pgtype.Text `json:"phone"`
	Email    string      `json:"email"`
	Profile  pgtype.Text `json:"profile"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Password,
		arg.Phone,
		arg.Email,
		arg.Profile,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.PasswordChangedAt,
		&i.Profile,
		&i.CreatedAt,
	)
	return i, err
}
